import 'dart:ffi';
import 'package:ffi/ffi.dart'; 
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class _AppContextHandle extends Opaque {}

class ServiceControl {
  static int id = 0;
  static const String serviceId = "{{androidIdentifier}}_service";
  static const MethodChannel channel =
      MethodChannel('tizen/internal/app_control_method');
  static final libAppMananger =
      DynamicLibrary.open("libcapi-appfw-app-manager.so.0");
  static late final int Function(
          Pointer<Utf8>, Pointer<Pointer<_AppContextHandle>>) getAppContext =
      libAppMananger
          .lookup<
                  NativeFunction<
                      Int32 Function(
                          Pointer<Utf8>, Pointer<Pointer<_AppContextHandle>>)>>(
              'app_manager_get_app_context')
          .asFunction();
  static late final int Function(Pointer<_AppContextHandle>)
      requestTerminateBgApp = libAppMananger
          .lookup<NativeFunction<Int32 Function(Pointer<_AppContextHandle>)>>(
              "app_manager_request_terminate_bg_app")
          .asFunction();
  static late final int Function(Pointer<_AppContextHandle>) destroyContext =
      libAppMananger
          .lookup<NativeFunction<Int32 Function(Pointer<_AppContextHandle>)>>(
              'app_context_destroy')
          .asFunction();

  static Future<void> setupAppControl() async {
    id = await channel.invokeMethod<int>('create') as int;
    final args = <String, dynamic>{'id': id, 'appId': serviceId};
    return channel.invokeMethod<void>('setAppControlData', args);
  }

  static void launchService() async {
    await setupAppControl();
    await channel
        .invokeMethod<bool>('sendLaunchRequest', <String, dynamic>{'id': id});
  }

  static void stopService() async {
    // This is a temporary solution to stop the service. In the future it
    // is going to be replaced by calling a proper channel function.
    // https://github.com/flutter-tizen/flutter-tizen/issues/216

    final nativeServiceId = serviceId.toNativeUtf8();
    final Pointer<Pointer<_AppContextHandle>> appContext = malloc();

    try {
      var ret = getAppContext(nativeServiceId, appContext);

      if (ret != 0) {
        throw PlatformException(
          message:
              'Failed to excute app_manager_get_app_context $nativeServiceId',
          code: "$ret",
        );
      }

      ret = requestTerminateBgApp(appContext.value);

      if (ret != 0) {
        throw PlatformException(
          message: 'Failed to excute app_manager_request_terminate_bg_app',
          code: "$ret",
        );
      }

      ret = destroyContext(appContext.value);

      if (ret != 0) {
        throw PlatformException(
          message: 'Failed to excute app_context_destroy',
          code: "$ret",
        );
      }
    } finally {
      malloc.free(nativeServiceId);
      malloc.free(appContext);
    }
  }
}

Future<void> main() async {
  runApp(MyApp());

  return ServiceControl.launchService();
}

// Below code is an example of working service application, modify it with own logic.
@pragma('vm:entry-point')
Future<void> serviceMain() async {
  int counter = 0;
  while (true) {
    print('Counter: $counter');
    await Future.delayed(Duration(seconds: 1));
    counter += 1;
  }
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // Try running your application with "flutter run". You'll see the
        // application has a blue toolbar. Then, without quitting the app, try
        // changing the primarySwatch below to Colors.green and then invoke
        // "hot reload" (press "r" in the console where you ran "flutter run",
        // or simply save your changes to "hot reload" in a Flutter IDE).
        // Notice that the counter didn't reset back to zero; the application
        // is not restarted.
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key? key, required this.title}) : super(key: key);

  // This widget is the home page of your application. It is stateful, meaning
  // that it has a State object (defined below) that contains fields that affect
  // how it looks.

  // This class is the configuration for the state. It holds the values (in this
  // case the title) provided by the parent (in this case the App widget) and
  // used by the build method of the State. Fields in a Widget subclass are
  // always marked "final".

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      // This call to setState tells the Flutter framework that something has
      // changed in this State, which causes it to rerun the build method below
      // so that the display can reflect the updated values. If we changed
      // _counter without calling setState(), then the build method would not be
      // called again, and so nothing would appear to happen.
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    // This method is rerun every time setState is called, for instance as done
    // by the _incrementCounter method above.
    //
    // The Flutter framework has been optimized to make rerunning build methods
    // fast, so that you can just rebuild anything that needs updating rather
    // than having to individually change instances of widgets.
    return Scaffold(
      appBar: AppBar(
        // Here we take the value from the MyHomePage object that was created by
        // the App.build method, and use it to set our appbar title.
        title: Text(widget.title),
      ),
      body: Center(
        // Center is a layout widget. It takes a single child and positions it
        // in the middle of the parent.
        child: Column(
          // Column is also a layout widget. It takes a list of children and
          // arranges them vertically. By default, it sizes itself to fit its
          // children horizontally, and tries to be as tall as its parent.
          //
          // Invoke "debug painting" (press "p" in the console, choose the
          // "Toggle Debug Paint" action from the Flutter Inspector in Android
          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
          // to see the wireframe for each widget.
          //
          // Column has various properties to control how it sizes itself and
          // how it positions its children. Here we use mainAxisAlignment to
          // center the children vertically; the main axis here is the vertical
          // axis because Columns are vertical (the cross axis would be
          // horizontal).
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
            TextButton(
                onPressed: () => ServiceControl.launchService(),
                child: Text("Launch service")),
            TextButton(
                onPressed: () => ServiceControl.stopService(),
                child: Text("Stop service"))
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
